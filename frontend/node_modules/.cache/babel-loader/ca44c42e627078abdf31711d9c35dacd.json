{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx\";\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertFromRaw, convertToRaw, draftToHtml } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props\n}) => {\n  // const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState, upadateEditorState] = useState(EditorState.createEmpty()); // const uploadImageCallBack = async (file) => {\n  //   // long story short, every time we upload an image, we\n  //   // need to save it to the state so we can get it's data\n  //   // later when we decide what to do with it.\n  //   // Make sure you have a uploadImages: [] as your default state\n  //   const imageObject = await {\n  //     file: file,\n  //     localSrc: URL.createObjectURL(file),\n  //   };\n  //   updateuploadedImages(uploadedImages.push(imageObject));\n  //   console.log(uploadedImages);\n  //   // We need to return a promise with the image src\n  //   // the img src we will use here will be what's needed\n  //   // to preview it in the browser. This will be different than what\n  //   // we will see in the index.md file we generate.\n  //   return new Promise((resolve, reject) => {\n  //     resolve({ data: { link: imageObject.localSrc } });\n  //   });\n  // };\n\n  return /*#__PURE__*/React.createElement(Editor, Object.assign({\n    wrapperClassName: \"wrapper-class\",\n    editorClassName: \"editor-class\",\n    toolbarClassName: \"toolbar-class\" // wrapperStyle={<wrapperStyleObject>}\n    // editorStyle={<editorStyleObject>}\n    // toolbarStyle={<toolbarStyleObject>}\n\n  }, props, {\n    onEditorStateChange: editorState => {\n      upadateEditorState(editorState);\n      console.log(editorState);\n      const rawContentState = convertToRaw(editorState.getCurrentContent());\n      console.log(rawContentState); // const HtmlContent = draftToHtml(rawContentState);\n      // console.log(HtmlContent);\n    },\n    uploadEnabled: true // toolbar={{ image: { uploadCallback: uploadImageCallBack } }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default EditorComponent;","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx"],"names":["React","useState","Editor","EditorState","convertFromRaw","convertToRaw","draftToHtml","EditorComponent","props","editorState","upadateEditorState","createEmpty","console","log","rawContentState","getCurrentContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAqDC,WAArD,QAAwE,UAAxE;AACA,OAAO,kDAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AACxC;AACA,QAAM,CAACC,WAAD,EAAeC,kBAAf,IAAoCT,QAAQ,CAACE,WAAW,CAACQ,WAAZ,EAAD,CAAlD,CAFwC,CAGxC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAC,eADnB;AAEE,IAAA,eAAe,EAAC,cAFlB;AAGE,IAAA,gBAAgB,EAAC,eAHnB,CAIE;AACA;AACA;;AANF,KAOMH,KAPN;AAQE,IAAA,mBAAmB,EAAGC,WAAW,IAAE;AACjCC,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,YAAMK,eAAe,GAAGT,YAAY,CAACI,WAAW,CAACM,iBAAZ,EAAD,CAApC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,eAAZ,EAJiC,CAKjC;AACA;AACD,KAfH;AAgBE,IAAA,aAAa,EAAE,IAhBjB,CAiBE;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAqBD,CAhDD;;AAkDA,eAAeP,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState ,convertFromRaw, convertToRaw  ,draftToHtml } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props }) => {\n  // const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState , upadateEditorState]= useState(EditorState.createEmpty())\n  // const uploadImageCallBack = async (file) => {\n  //   // long story short, every time we upload an image, we\n  //   // need to save it to the state so we can get it's data\n  //   // later when we decide what to do with it.\n\n  //   // Make sure you have a uploadImages: [] as your default state\n  //   const imageObject = await {\n  //     file: file,\n  //     localSrc: URL.createObjectURL(file),\n  //   };\n\n\n  //   updateuploadedImages(uploadedImages.push(imageObject));\n  //   console.log(uploadedImages);\n\n  //   // We need to return a promise with the image src\n  //   // the img src we will use here will be what's needed\n  //   // to preview it in the browser. This will be different than what\n  //   // we will see in the index.md file we generate.\n  //   return new Promise((resolve, reject) => {\n  //     resolve({ data: { link: imageObject.localSrc } });\n  //   });\n  // };\n\n  return (\n    <Editor\n      wrapperClassName=\"wrapper-class\"\n      editorClassName=\"editor-class\"\n      toolbarClassName=\"toolbar-class\"\n      // wrapperStyle={<wrapperStyleObject>}\n      // editorStyle={<editorStyleObject>}\n      // toolbarStyle={<toolbarStyleObject>}\n      {...props}\n      onEditorStateChange={(editorState=>{\n        upadateEditorState(editorState)\n        console.log(editorState);\n        const rawContentState = convertToRaw(editorState.getCurrentContent());     \n        console.log(rawContentState);\n        // const HtmlContent = draftToHtml(rawContentState);\n        // console.log(HtmlContent);\n      })}\n      uploadEnabled={true}\n      // toolbar={{ image: { uploadCallback: uploadImageCallBack } }}\n    />\n  );\n};\n\nexport default EditorComponent;\n"]},"metadata":{},"sourceType":"module"}