{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/pages/create-post/createPost.jsx\";\nimport React, { useState } from \"react\";\nimport EditorComponent from \"../../components/editor/editor\";\nimport { EditorState, convertToRaw } from \"draft-js\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./create-post.scss\";\nimport { connect } from \"react-redux\";\nimport { tokenSelector } from \"../../redux/auth/auth.selector\";\nimport { addPost } from \"../../redux/posts/post.action\";\nimport draftToHtml from \"draftjs-to-html\";\n\nfunction CreatePost({\n  token,\n  dispatch\n}) {\n  const [editorState, updateeditorState] = useState(EditorState.createEmpty());\n  const [postForm, updatePostForm] = useState({\n    title: \"\"\n  });\n\n  const onEditorStateChange = EditorState => {\n    const rawContentState = convertToRaw(EditorState.getCurrentContent());\n    updateeditorState(draftToHtml(rawContentState));\n  };\n\n  const {\n    title\n  } = postForm;\n\n  const formOnChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    updatePostForm(preval => {\n      return { ...preval,\n        [name]: value\n      };\n    });\n  };\n\n  const formOnSubmit = event => {\n    event.preventDefault();\n    const content = editorState;\n    const query = `mutation createPost($title: String! , $content: String!) {\n            createPost(title: $title ,  content: $content ){\n                _id\n                title\n                content\n                date\n                relatedComment{\n                  commentContent\n                  commentCreator{\n                    displayName\n                  }\n                }\n                postCreator{\n                  displayName\n                }\n              \n              \n            }\n          }`;\n    axios({\n      url: \"http://localhost:5000/graphql\",\n      method: \"POST\",\n      data: JSON.stringify({\n        query,\n        variables: {\n          content,\n          title\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    }).then(res => {\n      dispatch(addPost(res.data.data.createPost));\n      updateeditorState(EditorState.createEmpty());\n      updatePostForm({\n        title: \"\"\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create_post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"create_post_form\",\n    onSubmit: formOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \" title \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    name: \"title\",\n    onChange: formOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \" post content \"), /*#__PURE__*/React.createElement(EditorComponent, {\n    className: \"editor\",\n    onEditorStateChange: onEditorStateChange,\n    value: editorState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Add post\"))));\n}\n\nconst mapStateToProps = (state, ownprops) => ({\n  token: tokenSelector(state)\n});\n\nexport default connect(mapStateToProps)(CreatePost);","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/pages/create-post/createPost.jsx"],"names":["React","useState","EditorComponent","EditorState","convertToRaw","axios","useHistory","connect","tokenSelector","addPost","draftToHtml","CreatePost","token","dispatch","editorState","updateeditorState","createEmpty","postForm","updatePostForm","title","onEditorStateChange","rawContentState","getCurrentContent","formOnChange","event","name","value","target","preval","formOnSubmit","preventDefault","content","query","url","method","data","JSON","stringify","variables","headers","Authorization","then","res","createPost","catch","err","console","log","mapStateToProps","state","ownprops"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport EditorComponent from \"../../components/editor/editor\"\nimport { EditorState, convertToRaw } from \"draft-js\"\nimport axios from \"axios\"\nimport {useHistory} from \"react-router-dom\"\nimport \"./create-post.scss\"\nimport { connect } from \"react-redux\"\nimport { tokenSelector } from \"../../redux/auth/auth.selector\"\nimport { addPost } from \"../../redux/posts/post.action\"\nimport draftToHtml from \"draftjs-to-html\"\nfunction CreatePost({ token, dispatch }) {\n  const [editorState, updateeditorState] = useState(EditorState.createEmpty())\n  const [postForm, updatePostForm] = useState({ title: \"\" })\n  const onEditorStateChange = (EditorState) => {\n    const rawContentState = convertToRaw(EditorState.getCurrentContent())\n    updateeditorState(draftToHtml( rawContentState))\n  }\n\n  const { title } = postForm\n  const formOnChange = (event) => {\n    const { name, value } = event.target\n    updatePostForm((preval) => {\n      return { ...preval, [name]: value }\n    })\n  }\n  const formOnSubmit = (event) => {\n    event.preventDefault()\n    const content = editorState\n    const query = `mutation createPost($title: String! , $content: String!) {\n            createPost(title: $title ,  content: $content ){\n                _id\n                title\n                content\n                date\n                relatedComment{\n                  commentContent\n                  commentCreator{\n                    displayName\n                  }\n                }\n                postCreator{\n                  displayName\n                }\n              \n              \n            }\n          }`\n    axios({\n      url: \"http://localhost:5000/graphql\",\n      method: \"POST\",\n      data: JSON.stringify({\n        query,\n        variables: { content, title },\n      }),\n\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n    })\n      .then((res) => {\n        dispatch(addPost(res.data.data.createPost))\n        updateeditorState(EditorState.createEmpty())\n        updatePostForm({title:\"\"})\n        \n        \n\n\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n  return (\n    <div className=\"create_post\">\n      <div className=\"container\">\n        <form className=\"create_post_form\" onSubmit={formOnSubmit}>\n          <label htmlFor=\"title\"> title </label>\n          <input type=\"text\" value={title} name=\"title\" onChange={formOnChange} />\n          <label htmlFor=\"title\"> post content </label>\n\n          <EditorComponent className=\"editor\" onEditorStateChange={onEditorStateChange}  value={editorState} />\n          <button>Add post</button>\n        </form>\n      </div>\n    </div>\n  )\n}\nconst mapStateToProps = (state, ownprops) => ({\n  token: tokenSelector(state),\n})\nexport default connect(mapStateToProps)(CreatePost)\n"]},"metadata":{},"sourceType":"module"}