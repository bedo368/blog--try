{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx\";\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props\n}) => {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState, upadateEditorState] = useState(EditorState.createEmpty());\n\n  const uploadImageCallBack = async file => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file)\n    };\n    updateuploadedImages(uploadedImages.push(imageObject));\n    console.log(uploadedImages); // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n\n    return new Promise((resolve, reject) => {\n      resolve({\n        data: {\n          link: imageObject.localSrc\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Editor, Object.assign({\n    wrapperClassName: \"wrapper-class\",\n    editorClassName: \"editor-class\",\n    toolbarClassName: \"toolbar-class\" // wrapperStyle={<wrapperStyleObject>}\n    // editorStyle={<editorStyleObject>}\n    // toolbarStyle={<toolbarStyleObject>}\n\n  }, props, {\n    onEditorStateChange: editorState => {\n      upadateEditorState(editorState);\n      log;\n    },\n    uploadEnabled: true,\n    toolbar: {\n      image: {\n        uploadCallback: uploadImageCallBack\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default EditorComponent;","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx"],"names":["React","useState","Editor","EditorState","EditorComponent","props","uploadedImages","updateuploadedImages","editorState","upadateEditorState","createEmpty","uploadImageCallBack","file","imageObject","localSrc","URL","createObjectURL","push","console","log","Promise","resolve","reject","data","link","image","uploadCallback"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAO,kDAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AACxC,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCN,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACO,WAAD,EAAeC,kBAAf,IAAoCR,QAAQ,CAACE,WAAW,CAACO,WAAZ,EAAD,CAAlD;;AACA,QAAMC,mBAAmB,GAAG,MAAOC,IAAP,IAAgB;AAC1C;AACA;AACA;AAEA;AACA,UAAMC,WAAW,GAAG,MAAM;AACxBD,MAAAA,IAAI,EAAEA,IADkB;AAExBE,MAAAA,QAAQ,EAAEC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB;AAFc,KAA1B;AAKAL,IAAAA,oBAAoB,CAACD,cAAc,CAACW,IAAf,CAAoBJ,WAApB,CAAD,CAApB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ,EAZ0C,CAc1C;AACA;AACA;AACA;;AACA,WAAO,IAAIc,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,MAAAA,OAAO,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAEX,WAAW,CAACC;AAApB;AAAR,OAAD,CAAP;AACD,KAFM,CAAP;AAGD,GArBD;;AAsBA,sBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAC,eADnB;AAEE,IAAA,eAAe,EAAC,cAFlB;AAGE,IAAA,gBAAgB,EAAC,eAHnB,CAIE;AACA;AACA;;AANF,KAOMT,KAPN;AAQE,IAAA,mBAAmB,EAAGG,WAAW,IAAE;AACjCC,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACAW,MAAAA,GAAG;AACJ,KAXH;AAYE,IAAA,aAAa,EAAE,IAZjB;AAaE,IAAA,OAAO,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAEf;AAAlB;AAAT,KAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAiBD,CA1CD;;AA4CA,eAAeP,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props }) => {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState , upadateEditorState]= useState(EditorState.createEmpty())\n  const uploadImageCallBack = async (file) => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file),\n    };\n\n    updateuploadedImages(uploadedImages.push(imageObject));\n    console.log(uploadedImages);\n\n    // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n    return new Promise((resolve, reject) => {\n      resolve({ data: { link: imageObject.localSrc } });\n    });\n  };\n  return (\n    <Editor\n      wrapperClassName=\"wrapper-class\"\n      editorClassName=\"editor-class\"\n      toolbarClassName=\"toolbar-class\"\n      // wrapperStyle={<wrapperStyleObject>}\n      // editorStyle={<editorStyleObject>}\n      // toolbarStyle={<toolbarStyleObject>}\n      {...props}\n      onEditorStateChange={(editorState=>{\n        upadateEditorState(editorState)\n        log\n      })}\n      uploadEnabled={true}\n      toolbar={{ image: { uploadCallback: uploadImageCallBack } }}\n    />\n  );\n};\n\nexport default EditorComponent;\n"]},"metadata":{},"sourceType":"module"}