{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/pages/create-post/createPost.jsx\";\nimport React, { useState } from \"react\";\nimport EditorComponent from \"../../components/editor/editor\";\nimport { EditorState, convertToRaw, convertFromHTML } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport axios from \"axios\";\nimport \"./create-post.scss\";\nimport { connect } from \"react-redux\";\nimport { tokenSelector } from \"../../redux/auth/auth.selector\";\n\nfunction CreatePost({\n  token\n}) {\n  //   const [editorState, updateeditorState] = useState(EditorState.createEmpty());\n  const [postForm, updatePostForm] = useState({\n    title: \"\",\n    content: \"\"\n  });\n  const [MaineditorState, upadateEditorState] = useState(\"\");\n\n  const onEditorStateChange = EditorState => {\n    const rawContentState = convertToRaw(EditorState.getCurrentContent());\n    const HtmlContent = draftToHtml(rawContentState);\n    upadateEditorState(HtmlContent);\n  };\n\n  const {\n    title\n  } = postForm;\n\n  const formOnChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    updatePostForm(preval => {\n      return { ...preval,\n        [name]: value\n      };\n    });\n    console.log(title);\n  };\n\n  const formOnSubmit = event => {\n    event.preventDefault();\n    const col = MaineditorState.toString();\n    const query = `mutation{\n            createPost(title:\"${title}\" content:\"\" ){\n              _id\n              title\n              content\n              postCreator{\n                  _id\n                  displayName\n              }\n              \n              \n            }\n          }`;\n    axios({\n      url: \"http://localhost:5000/graphql\",\n      method: \"POST\",\n      data: {\n        query: query\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    }).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create_post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"create_post_form\",\n    onSubmit: formOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \" title \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    name: \"title\",\n    onChange: formOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \" post content \"), /*#__PURE__*/React.createElement(EditorComponent, {\n    className: \"editor\",\n    onEditorStateChange: onEditorStateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Add post\"))));\n}\n\nconst mapStateToProps = (state, ownprops) => ({\n  token: tokenSelector(state)\n});\n\nexport default connect(mapStateToProps)(CreatePost);","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/pages/create-post/createPost.jsx"],"names":["React","useState","EditorComponent","EditorState","convertToRaw","convertFromHTML","draftToHtml","axios","connect","tokenSelector","CreatePost","token","postForm","updatePostForm","title","content","MaineditorState","upadateEditorState","onEditorStateChange","rawContentState","getCurrentContent","HtmlContent","formOnChange","event","name","value","target","preval","console","log","formOnSubmit","preventDefault","col","toString","query","url","method","data","headers","Authorization","then","res","catch","err","mapStateToProps","state","ownprops"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport EditorComponent from \"../../components/editor/editor\";\nimport { EditorState , convertToRaw  , convertFromHTML  } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport axios from \"axios\"\nimport \"./create-post.scss\";\nimport { connect } from \"react-redux\";\nimport { tokenSelector } from \"../../redux/auth/auth.selector\";\nfunction CreatePost({token}) {\n//   const [editorState, updateeditorState] = useState(EditorState.createEmpty());\n    const [postForm ,updatePostForm ] = useState({title:\"\", content:\"\"})\n    const [MaineditorState , upadateEditorState]= useState(\"\")\n    const onEditorStateChange = (EditorState=>{\n        const rawContentState = convertToRaw(EditorState.getCurrentContent());     \n        const HtmlContent = draftToHtml(rawContentState);\n        upadateEditorState(HtmlContent)\n        \n      })\n\n    const { title  } = postForm\n    const formOnChange = (event)=>{\n        const { name , value}= event.target\n        updatePostForm(preval =>{\n            return {...preval , [name] : value}\n        })\n        console.log(title);\n    }\n    const formOnSubmit = (event)=>{\n        event.preventDefault()\n        const col = MaineditorState.toString()\n        const query = `mutation{\n            createPost(title:\"${title}\" content:\"\" ){\n              _id\n              title\n              content\n              postCreator{\n                  _id\n                  displayName\n              }\n              \n              \n            }\n          }`;\n          axios({\n            url: \"http://localhost:5000/graphql\",\n            method: \"POST\",\n            data: {\n              query: query,\n            },\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \" + token,\n            },\n          })\n            .then((res) => {\n              console.log(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n\n    }\n  return (\n    <div className=\"create_post\">\n      <div className=\"container\">\n        <form className=\"create_post_form\" onSubmit={formOnSubmit} > \n          <label htmlFor=\"title\"> title </label>\n          <input type=\"text\" value={title} name=\"title\"  onChange={formOnChange} />\n          <label htmlFor=\"title\"> post content </label>\n          {/* <textarea name=\"content\" value={content} id=\"\" cols=\"30\" rows=\"10\" onChange={formOnChange} ></textarea> */}\n          <EditorComponent\n            className=\"editor\"\n            onEditorStateChange={onEditorStateChange}\n          />\n          <button>Add post</button>\n        </form>\n      </div>\n    </div>\n  );\n}\nconst mapStateToProps = (state, ownprops) => ({\n    token: tokenSelector(state),\n  });\nexport default connect(mapStateToProps)( CreatePost);\n"]},"metadata":{},"sourceType":"module"}