{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx\";\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertFromRaw, convertToRaw, draftToHtml } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props\n}) => {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState, upadateEditorState] = useState(EditorState.createEmpty());\n  const [contentState, upadateContentState] = useState();\n\n  const uploadImageCallBack = async file => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file)\n    };\n    updateuploadedImages(uploadedImages.push(imageObject));\n    console.log(uploadedImages); // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n\n    return new Promise((resolve, reject) => {\n      resolve({\n        data: {\n          link: imageObject.localSrc\n        }\n      });\n    });\n  };\n\n  const onContentStateChange = contentState => {\n    upadateContentState(contentState);\n  };\n\n  return /*#__PURE__*/React.createElement(Editor, Object.assign({\n    wrapperClassName: \"wrapper-class\",\n    editorClassName: \"editor-class\",\n    toolbarClassName: \"toolbar-class\" // wrapperStyle={<wrapperStyleObject>}\n    // editorStyle={<editorStyleObject>}\n    // toolbarStyle={<toolbarStyleObject>}\n\n  }, props, {\n    onEditorStateChange: editorState => {\n      upadateEditorState(editorState);\n      console.log(editorState);\n      const rawContentState = convertToRaw(editorState.getCurrentContent());\n      console.log(rawContentState); // const HtmlContent = draftToHtml(rawContentState);\n      // console.log(HtmlContent);\n    },\n    onContentStateChange: onContentStateChange,\n    uploadEnabled: true,\n    toolbar: {\n      image: {\n        uploadCallback: uploadImageCallBack\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default EditorComponent;","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx"],"names":["React","useState","Editor","EditorState","convertFromRaw","convertToRaw","draftToHtml","EditorComponent","props","uploadedImages","updateuploadedImages","editorState","upadateEditorState","createEmpty","contentState","upadateContentState","uploadImageCallBack","file","imageObject","localSrc","URL","createObjectURL","push","console","log","Promise","resolve","reject","data","link","onContentStateChange","rawContentState","getCurrentContent","image","uploadCallback"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAqDC,WAArD,QAAwE,UAAxE;AACA,OAAO,kDAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AACxC,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCT,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACU,WAAD,EAAeC,kBAAf,IAAoCX,QAAQ,CAACE,WAAW,CAACU,WAAZ,EAAD,CAAlD;AACA,QAAM,CAACC,YAAD,EAAgBC,mBAAhB,IAAsCd,QAAQ,EAApD;;AACA,QAAMe,mBAAmB,GAAG,MAAOC,IAAP,IAAgB;AAC1C;AACA;AACA;AAEA;AACA,UAAMC,WAAW,GAAG,MAAM;AACxBD,MAAAA,IAAI,EAAEA,IADkB;AAExBE,MAAAA,QAAQ,EAAEC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB;AAFc,KAA1B;AAMAP,IAAAA,oBAAoB,CAACD,cAAc,CAACa,IAAf,CAAoBJ,WAApB,CAAD,CAApB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYf,cAAZ,EAb0C,CAe1C;AACA;AACA;AACA;;AACA,WAAO,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,MAAAA,OAAO,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAEX,WAAW,CAACC;AAApB;AAAR,OAAD,CAAP;AACD,KAFM,CAAP;AAGD,GAtBD;;AAuBA,QAAMW,oBAAoB,GAAIhB,YAAD,IAAgB;AAC3CC,IAAAA,mBAAmB,CAACD,YAAD,CAAnB;AACD,GAFD;;AAGA,sBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAC,eADnB;AAEE,IAAA,eAAe,EAAC,cAFlB;AAGE,IAAA,gBAAgB,EAAC,eAHnB,CAIE;AACA;AACA;;AANF,KAOMN,KAPN;AAQE,IAAA,mBAAmB,EAAGG,WAAW,IAAE;AACjCC,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AACA,YAAMoB,eAAe,GAAG1B,YAAY,CAACM,WAAW,CAACqB,iBAAZ,EAAD,CAApC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYO,eAAZ,EAJiC,CAKjC;AACA;AACD,KAfH;AAgBE,IAAA,oBAAoB,EAAED,oBAhBxB;AAiBE,IAAA,aAAa,EAAE,IAjBjB;AAkBE,IAAA,OAAO,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAElB;AAAlB;AAAT,KAlBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAsBD,CApDD;;AAsDA,eAAeT,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState ,convertFromRaw, convertToRaw  ,draftToHtml } from 'draft-js';\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props }) => {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState , upadateEditorState]= useState(EditorState.createEmpty())\n  const [contentState , upadateContentState]= useState()\n  const uploadImageCallBack = async (file) => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file),\n    };\n\n\n    updateuploadedImages(uploadedImages.push(imageObject));\n    console.log(uploadedImages);\n\n    // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n    return new Promise((resolve, reject) => {\n      resolve({ data: { link: imageObject.localSrc } });\n    });\n  };\n  const onContentStateChange = (contentState)=>{\n    upadateContentState(contentState)\n  }\n  return (\n    <Editor\n      wrapperClassName=\"wrapper-class\"\n      editorClassName=\"editor-class\"\n      toolbarClassName=\"toolbar-class\"\n      // wrapperStyle={<wrapperStyleObject>}\n      // editorStyle={<editorStyleObject>}\n      // toolbarStyle={<toolbarStyleObject>}\n      {...props}\n      onEditorStateChange={(editorState=>{\n        upadateEditorState(editorState)\n        console.log(editorState);\n        const rawContentState = convertToRaw(editorState.getCurrentContent());     \n        console.log(rawContentState);\n        // const HtmlContent = draftToHtml(rawContentState);\n        // console.log(HtmlContent);\n      })}\n      onContentStateChange={onContentStateChange}\n      uploadEnabled={true}\n      toolbar={{ image: { uploadCallback: uploadImageCallBack } }}\n    />\n  );\n};\n\nexport default EditorComponent;\n"]},"metadata":{},"sourceType":"module"}