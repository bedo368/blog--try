{"ast":null,"code":"var _jsxFileName = \"/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx\";\nimport React, { useState } from \"react\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent = ({ ...props\n}) => {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState, updateeditorState] = useState(EditorState.createEmpty());\n\n  const uploadImageCallBack = async file => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file)\n    };\n    updateuploadedImages(uploadedImages.push(imageObject));\n    console.log(uploadedImages); // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n\n    return new Promise((resolve, reject) => {\n      resolve({\n        data: {\n          link: imageObject.localSrc\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Editor, Object.assign({}, props, {\n    uploadEnabled: true,\n    placeholder: \"type your post\",\n    editorState: editorState,\n    toolbar: {\n      image: {\n        uploadCallback: uploadImageCallBack\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default EditorComponent;","map":{"version":3,"sources":["/mnt/d/react&bac/genral-blog/frontend/src/components/editor/editor.jsx"],"names":["React","useState","Editor","EditorState","EditorComponent","props","uploadedImages","updateuploadedImages","editorState","updateeditorState","createEmpty","uploadImageCallBack","file","imageObject","localSrc","URL","createObjectURL","push","console","log","Promise","resolve","reject","data","link","image","uploadCallback"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAyB,qBAAzB;AACA,SAAQC,WAAR,QAA2B,UAA3B;AACA,OAAO,kDAAP;;AAEA,MAAMC,eAAe,GAAI,CAAE,EAAE,GAAGC;AAAL,CAAF,KAAmB;AAC1C,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCN,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACO,WAAD,EAAeC,iBAAf,IAAoCR,QAAQ,CAACE,WAAW,CAACO,WAAZ,EAAD,CAAlD;;AACA,QAAOC,mBAAmB,GAAG,MAAMC,IAAN,IAAc;AACzC;AACA;AACA;AAEA;AACA,UAAMC,WAAW,GAAG,MAAM;AACxBD,MAAAA,IAAI,EAAEA,IADkB;AAExBE,MAAAA,QAAQ,EAAEC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB;AAFc,KAA1B;AAKAL,IAAAA,oBAAoB,CAACD,cAAc,CAACW,IAAf,CAAoBJ,WAApB,CAAD,CAApB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ,EAZyC,CAezC;AACA;AACA;AACA;;AACA,WAAO,IAAIc,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,MAAAA,OAAO,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAEX,WAAW,CAACC;AAApB;AAAR,OAAD,CAAP;AACD,KAFM,CAAP;AAGD,GAtBD;;AAwBA,sBACE,oBAAC,MAAD,oBACMT,KADN;AAEE,IAAA,aAAa,EAAE,IAFjB;AAGE,IAAA,WAAW,EAAC,gBAHd;AAIE,IAAA,WAAW,EAAEG,WAJf;AAKE,IAAA,OAAO,EAAE;AAAEiB,MAAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAEf;AAAlB;AAAT,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CApCD;;AAsCA,eAAeP,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Editor   } from \"react-draft-wysiwyg\";\nimport {EditorState } from \"draft-js\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst EditorComponent =  ( { ...props })=>  {\n  const [uploadedImages, updateuploadedImages] = useState([]);\n  const [editorState , updateeditorState] = useState(EditorState.createEmpty())\n  const  uploadImageCallBack = async(file)=> {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n\n    // Make sure you have a uploadImages: [] as your default state\n    const imageObject = await {\n      file: file,\n      localSrc: URL.createObjectURL(file),\n    };\n\n    updateuploadedImages(uploadedImages.push(imageObject) );\n    console.log(uploadedImages);\n\n\n    // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n    return new Promise((resolve, reject) => {\n      resolve({ data: { link: imageObject.localSrc } });\n    });\n  }\n\n  return (\n    <Editor\n      {...props}\n      uploadEnabled={true}\n      placeholder=\"type your post\"\n      editorState={editorState}\n      toolbar={{ image: { uploadCallback: uploadImageCallBack } }}\n    />\n  );\n}\n\nexport default EditorComponent;\n"]},"metadata":{},"sourceType":"module"}